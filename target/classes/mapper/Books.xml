<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.lzf.dao.BooksDao">

    <resultMap id="result" type="org.lzf.bean.Books">
        <id column="book_id" property="bookId"/>
        <result column="book_name" property="bookName"/>
        <result column="author" property="author"/>
        <result column="classifying" property="classifying"/>
        <result column="price" property="price"/>
        <result column="size" property="size"/>
        <result column="part" property="part"/>
    </resultMap>

    <select id="select" parameterType="java.lang.String" resultMap="result">
        select b.book_id, b.book_name, b.author, b.classifying, b.price, count(b.book_name) as size, count(b2.borrows_book_name) as part
        from books b
                 left join borrows b2 on b.book_id = b2.borrows_book_id and return_time IS NULL
        where b.book_name like '%' #{bookName} '%'
        group by b.book_name
    </select>

    <select id="selectById" parameterType="java.lang.String" resultType="org.lzf.bean.Books">
        select *
        from books
        where book_id = #{bookId}
    </select>

    <select id="selectAll" parameterType="java.lang.String" resultMap="result">
        select b.book_id, b.book_name, b.author, b.classifying, b.price, count(b.book_name) as size, count(b2.borrows_book_name) as part
        from books b
                 left join borrows b2 on b.book_id = b2.borrows_book_id and return_time IS NULL
    </select>

    <insert id="insert" parameterType="org.lzf.bean.Books">
        insert into books(book_id, book_name, author, classifying, price, size)
            VALUE (#{bookId}, #{bookName}, #{author}, #{classifying}, #{price}, #{size});
    </insert>

    <delete id="deleteByCondition" parameterType="org.lzf.bean.Books">
        delete from books
        <where>
            <if test="bookId != null">
                book_id = #{bookId}
            </if>
            <if test="bookName != null">
                and book_name = #{bookName}
            </if>
        </where>
    </delete>

    <update id="updateById" parameterType="map">
        update books
        <set>
            <if test="books.bookId != null">
                book_id = #{books.bookId},
            </if>
            <if test="books.bookName != null">
                book_name = #{books.bookName},
            </if>
            <if test="books.author != null">
                author = #{books.author},
            </if>
            <if test="books.classifying != null">
                classifying = #{books.classifying},
            </if>
            <if test="books.price != null">
                price = #{books.price},
            </if>
        </set>
        where book_id=#{oldId}
    </update>

</mapper>